/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface Order
 */
export interface Order {
    /**
     * 
     * @type {string}
     * @memberof Order
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof Order
     */
    'clientId'?: string;
    /**
     * 
     * @type {string}
     * @memberof Order
     */
    'date'?: string;
    /**
     * 
     * @type {Point}
     * @memberof Order
     */
    'location'?: Point;
    /**
     * 
     * @type {number}
     * @memberof Order
     */
    'requestedGLP'?: number;
    /**
     * 
     * @type {number}
     * @memberof Order
     */
    'deliveredGLP'?: number;
    /**
     * 
     * @type {string}
     * @memberof Order
     */
    'deliveryLimit'?: string;
    /**
     * 
     * @type {string}
     * @memberof Order
     */
    'status'?: OrderStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof Order
     */
    'maxDeliveryDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof Order
     */
    'minDeliveryDate'?: string;
}

export const OrderStatusEnum = {
    Pending: 'PENDING',
    Calculating: 'CALCULATING',
    InProgress: 'IN_PROGRESS',
    Completed: 'COMPLETED'
} as const;

export type OrderStatusEnum = typeof OrderStatusEnum[keyof typeof OrderStatusEnum];

/**
 * 
 * @export
 * @interface PageStation
 */
export interface PageStation {
    /**
     * 
     * @type {number}
     * @memberof PageStation
     */
    'totalElements'?: number;
    /**
     * 
     * @type {number}
     * @memberof PageStation
     */
    'totalPages'?: number;
    /**
     * 
     * @type {number}
     * @memberof PageStation
     */
    'size'?: number;
    /**
     * 
     * @type {Array<Station>}
     * @memberof PageStation
     */
    'content'?: Array<Station>;
    /**
     * 
     * @type {number}
     * @memberof PageStation
     */
    'number'?: number;
    /**
     * 
     * @type {SortObject}
     * @memberof PageStation
     */
    'sort'?: SortObject;
    /**
     * 
     * @type {boolean}
     * @memberof PageStation
     */
    'first'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PageStation
     */
    'last'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof PageStation
     */
    'numberOfElements'?: number;
    /**
     * 
     * @type {PageableObject}
     * @memberof PageStation
     */
    'pageable'?: PageableObject;
    /**
     * 
     * @type {boolean}
     * @memberof PageStation
     */
    'empty'?: boolean;
}
/**
 * 
 * @export
 * @interface PageTruck
 */
export interface PageTruck {
    /**
     * 
     * @type {number}
     * @memberof PageTruck
     */
    'totalElements'?: number;
    /**
     * 
     * @type {number}
     * @memberof PageTruck
     */
    'totalPages'?: number;
    /**
     * 
     * @type {number}
     * @memberof PageTruck
     */
    'size'?: number;
    /**
     * 
     * @type {Array<Truck>}
     * @memberof PageTruck
     */
    'content'?: Array<Truck>;
    /**
     * 
     * @type {number}
     * @memberof PageTruck
     */
    'number'?: number;
    /**
     * 
     * @type {SortObject}
     * @memberof PageTruck
     */
    'sort'?: SortObject;
    /**
     * 
     * @type {boolean}
     * @memberof PageTruck
     */
    'first'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PageTruck
     */
    'last'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof PageTruck
     */
    'numberOfElements'?: number;
    /**
     * 
     * @type {PageableObject}
     * @memberof PageTruck
     */
    'pageable'?: PageableObject;
    /**
     * 
     * @type {boolean}
     * @memberof PageTruck
     */
    'empty'?: boolean;
}
/**
 * 
 * @export
 * @interface Pageable
 */
export interface Pageable {
    /**
     * 
     * @type {number}
     * @memberof Pageable
     */
    'page'?: number;
    /**
     * 
     * @type {number}
     * @memberof Pageable
     */
    'size'?: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof Pageable
     */
    'sort'?: Array<string>;
}
/**
 * 
 * @export
 * @interface PageableObject
 */
export interface PageableObject {
    /**
     * 
     * @type {number}
     * @memberof PageableObject
     */
    'offset'?: number;
    /**
     * 
     * @type {SortObject}
     * @memberof PageableObject
     */
    'sort'?: SortObject;
    /**
     * 
     * @type {boolean}
     * @memberof PageableObject
     */
    'paged'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof PageableObject
     */
    'pageSize'?: number;
    /**
     * 
     * @type {number}
     * @memberof PageableObject
     */
    'pageNumber'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof PageableObject
     */
    'unpaged'?: boolean;
}
/**
 * 
 * @export
 * @interface Point
 */
export interface Point {
    /**
     * 
     * @type {number}
     * @memberof Point
     */
    'x'?: number;
    /**
     * 
     * @type {number}
     * @memberof Point
     */
    'y'?: number;
}
/**
 * 
 * @export
 * @interface RegisterOrderRequest
 */
export interface RegisterOrderRequest {
    /**
     * 
     * @type {string}
     * @memberof RegisterOrderRequest
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof RegisterOrderRequest
     */
    'clientId'?: string;
    /**
     * 
     * @type {string}
     * @memberof RegisterOrderRequest
     */
    'date'?: string;
    /**
     * 
     * @type {Point}
     * @memberof RegisterOrderRequest
     */
    'location'?: Point;
    /**
     * 
     * @type {number}
     * @memberof RegisterOrderRequest
     */
    'requestedGLP'?: number;
    /**
     * 
     * @type {string}
     * @memberof RegisterOrderRequest
     */
    'deliveryLimit'?: string;
}
/**
 * 
 * @export
 * @interface Reservation
 */
export interface Reservation {
    /**
     * 
     * @type {string}
     * @memberof Reservation
     */
    'dateTime'?: string;
    /**
     * 
     * @type {number}
     * @memberof Reservation
     */
    'amount'?: number;
    /**
     * 
     * @type {string}
     * @memberof Reservation
     */
    'vehicleId'?: string;
    /**
     * 
     * @type {string}
     * @memberof Reservation
     */
    'orderId'?: string;
}
/**
 * 
 * @export
 * @interface SimulationCommandRequest
 */
export interface SimulationCommandRequest {
    /**
     * 
     * @type {string}
     * @memberof SimulationCommandRequest
     */
    'command'?: string;
}
/**
 * 
 * @export
 * @interface SimulationStatus
 */
export interface SimulationStatus {
    /**
     * 
     * @type {boolean}
     * @memberof SimulationStatus
     */
    'running'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof SimulationStatus
     */
    'paused'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof SimulationStatus
     */
    'timeAcceleration'?: number;
}
/**
 * 
 * @export
 * @interface SortObject
 */
export interface SortObject {
    /**
     * 
     * @type {boolean}
     * @memberof SortObject
     */
    'empty'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof SortObject
     */
    'sorted'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof SortObject
     */
    'unsorted'?: boolean;
}
/**
 * 
 * @export
 * @interface StartSimulationRequest
 */
export interface StartSimulationRequest {
    /**
     * 
     * @type {string}
     * @memberof StartSimulationRequest
     */
    'startTimeOrders'?: string;
    /**
     * 
     * @type {string}
     * @memberof StartSimulationRequest
     */
    'endTimeOrders'?: string;
    /**
     * 
     * @type {string}
     * @memberof StartSimulationRequest
     */
    'mode'?: string;
}
/**
 * 
 * @export
 * @interface Station
 */
export interface Station {
    /**
     * 
     * @type {string}
     * @memberof Station
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof Station
     */
    'name'?: string;
    /**
     * 
     * @type {Point}
     * @memberof Station
     */
    'location'?: Point;
    /**
     * 
     * @type {number}
     * @memberof Station
     */
    'maxCapacity'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof Station
     */
    'mainStation'?: boolean;
    /**
     * 
     * @type {{ [key: string]: number; }}
     * @memberof Station
     */
    'availableCapacityPerDate'?: { [key: string]: number; };
    /**
     * 
     * @type {Array<Reservation>}
     * @memberof Station
     */
    'reservationHistory'?: Array<Reservation>;
}
/**
 * 
 * @export
 * @interface Truck
 */
export interface Truck {
    /**
     * 
     * @type {string}
     * @memberof Truck
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof Truck
     */
    'code'?: string;
    /**
     * 
     * @type {string}
     * @memberof Truck
     */
    'type'?: TruckTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof Truck
     */
    'status'?: TruckStatusEnum;
    /**
     * 
     * @type {number}
     * @memberof Truck
     */
    'tareWeight'?: number;
    /**
     * 
     * @type {number}
     * @memberof Truck
     */
    'maxCapacity'?: number;
    /**
     * 
     * @type {number}
     * @memberof Truck
     */
    'currentCapacity'?: number;
    /**
     * 
     * @type {number}
     * @memberof Truck
     */
    'fuelCapacity'?: number;
    /**
     * 
     * @type {number}
     * @memberof Truck
     */
    'currentFuel'?: number;
    /**
     * 
     * @type {string}
     * @memberof Truck
     */
    'nextMaintenance'?: string;
    /**
     * 
     * @type {Point}
     * @memberof Truck
     */
    'location'?: Point;
}

export const TruckTypeEnum = {
    Ta: 'TA',
    Tb: 'TB',
    Tc: 'TC',
    Td: 'TD'
} as const;

export type TruckTypeEnum = typeof TruckTypeEnum[keyof typeof TruckTypeEnum];
export const TruckStatusEnum = {
    Maintenance: 'MAINTENANCE',
    Idle: 'IDLE',
    Active: 'ACTIVE',
    BrokenDown: 'BROKEN_DOWN'
} as const;

export type TruckStatusEnum = typeof TruckStatusEnum[keyof typeof TruckStatusEnum];

/**
 * 
 * @export
 * @interface TruckBreakdownRequest
 */
export interface TruckBreakdownRequest {
    /**
     * 
     * @type {string}
     * @memberof TruckBreakdownRequest
     */
    'reason'?: string;
}

/**
 * LogisticCollapseControllerApi - axios parameter creator
 * @export
 */
export const LogisticCollapseControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCollapseTypes: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/collapse/types`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} sessionId 
         * @param {string} collapseType 
         * @param {string} description 
         * @param {number} severityLevel 
         * @param {string} affectedArea 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reportCollapse: async (sessionId: string, collapseType: string, description: string, severityLevel: number, affectedArea: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sessionId' is not null or undefined
            assertParamExists('reportCollapse', 'sessionId', sessionId)
            // verify required parameter 'collapseType' is not null or undefined
            assertParamExists('reportCollapse', 'collapseType', collapseType)
            // verify required parameter 'description' is not null or undefined
            assertParamExists('reportCollapse', 'description', description)
            // verify required parameter 'severityLevel' is not null or undefined
            assertParamExists('reportCollapse', 'severityLevel', severityLevel)
            // verify required parameter 'affectedArea' is not null or undefined
            assertParamExists('reportCollapse', 'affectedArea', affectedArea)
            const localVarPath = `/api/collapse/report`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (sessionId !== undefined) {
                localVarQueryParameter['sessionId'] = sessionId;
            }

            if (collapseType !== undefined) {
                localVarQueryParameter['collapseType'] = collapseType;
            }

            if (description !== undefined) {
                localVarQueryParameter['description'] = description;
            }

            if (severityLevel !== undefined) {
                localVarQueryParameter['severityLevel'] = severityLevel;
            }

            if (affectedArea !== undefined) {
                localVarQueryParameter['affectedArea'] = affectedArea;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LogisticCollapseControllerApi - functional programming interface
 * @export
 */
export const LogisticCollapseControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LogisticCollapseControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCollapseTypes(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCollapseTypes(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LogisticCollapseControllerApi.getCollapseTypes']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} sessionId 
         * @param {string} collapseType 
         * @param {string} description 
         * @param {number} severityLevel 
         * @param {string} affectedArea 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async reportCollapse(sessionId: string, collapseType: string, description: string, severityLevel: number, affectedArea: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.reportCollapse(sessionId, collapseType, description, severityLevel, affectedArea, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LogisticCollapseControllerApi.reportCollapse']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * LogisticCollapseControllerApi - factory interface
 * @export
 */
export const LogisticCollapseControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LogisticCollapseControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCollapseTypes(options?: RawAxiosRequestConfig): AxiosPromise<Array<string>> {
            return localVarFp.getCollapseTypes(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} sessionId 
         * @param {string} collapseType 
         * @param {string} description 
         * @param {number} severityLevel 
         * @param {string} affectedArea 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reportCollapse(sessionId: string, collapseType: string, description: string, severityLevel: number, affectedArea: string, options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.reportCollapse(sessionId, collapseType, description, severityLevel, affectedArea, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LogisticCollapseControllerApi - object-oriented interface
 * @export
 * @class LogisticCollapseControllerApi
 * @extends {BaseAPI}
 */
export class LogisticCollapseControllerApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogisticCollapseControllerApi
     */
    public getCollapseTypes(options?: RawAxiosRequestConfig) {
        return LogisticCollapseControllerApiFp(this.configuration).getCollapseTypes(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} sessionId 
     * @param {string} collapseType 
     * @param {string} description 
     * @param {number} severityLevel 
     * @param {string} affectedArea 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogisticCollapseControllerApi
     */
    public reportCollapse(sessionId: string, collapseType: string, description: string, severityLevel: number, affectedArea: string, options?: RawAxiosRequestConfig) {
        return LogisticCollapseControllerApiFp(this.configuration).reportCollapse(sessionId, collapseType, description, severityLevel, affectedArea, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * MainControllerApi - axios parameter creator
 * @export
 */
export const MainControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sayHello: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MainControllerApi - functional programming interface
 * @export
 */
export const MainControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MainControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sayHello(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sayHello(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MainControllerApi.sayHello']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * MainControllerApi - factory interface
 * @export
 */
export const MainControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MainControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sayHello(options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.sayHello(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MainControllerApi - object-oriented interface
 * @export
 * @class MainControllerApi
 * @extends {BaseAPI}
 */
export class MainControllerApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MainControllerApi
     */
    public sayHello(options?: RawAxiosRequestConfig) {
        return MainControllerApiFp(this.configuration).sayHello(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * OperationControllerApi - axios parameter creator
 * @export
 */
export const OperationControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOperationStatus: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/operation/status`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        manualReplanification: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/operation/replan`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {RegisterOrderRequest} registerOrderRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerOrder: async (registerOrderRequest: RegisterOrderRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'registerOrderRequest' is not null or undefined
            assertParamExists('registerOrder', 'registerOrderRequest', registerOrderRequest)
            const localVarPath = `/operation/orders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(registerOrderRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} truckId 
         * @param {TruckBreakdownRequest} truckBreakdownRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reportTruckBreakdown: async (truckId: string, truckBreakdownRequest: TruckBreakdownRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'truckId' is not null or undefined
            assertParamExists('reportTruckBreakdown', 'truckId', truckId)
            // verify required parameter 'truckBreakdownRequest' is not null or undefined
            assertParamExists('reportTruckBreakdown', 'truckBreakdownRequest', truckBreakdownRequest)
            const localVarPath = `/operation/trucks/{truckId}/breakdown`
                .replace(`{${"truckId"}}`, encodeURIComponent(String(truckId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(truckBreakdownRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OperationControllerApi - functional programming interface
 * @export
 */
export const OperationControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OperationControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOperationStatus(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: any; }>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOperationStatus(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OperationControllerApi.getOperationStatus']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async manualReplanification(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: string; }>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.manualReplanification(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OperationControllerApi.manualReplanification']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {RegisterOrderRequest} registerOrderRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async registerOrder(registerOrderRequest: RegisterOrderRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.registerOrder(registerOrderRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OperationControllerApi.registerOrder']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} truckId 
         * @param {TruckBreakdownRequest} truckBreakdownRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async reportTruckBreakdown(truckId: string, truckBreakdownRequest: TruckBreakdownRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.reportTruckBreakdown(truckId, truckBreakdownRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OperationControllerApi.reportTruckBreakdown']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * OperationControllerApi - factory interface
 * @export
 */
export const OperationControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OperationControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOperationStatus(options?: RawAxiosRequestConfig): AxiosPromise<{ [key: string]: any; }> {
            return localVarFp.getOperationStatus(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        manualReplanification(options?: RawAxiosRequestConfig): AxiosPromise<{ [key: string]: string; }> {
            return localVarFp.manualReplanification(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {RegisterOrderRequest} registerOrderRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerOrder(registerOrderRequest: RegisterOrderRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.registerOrder(registerOrderRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} truckId 
         * @param {TruckBreakdownRequest} truckBreakdownRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reportTruckBreakdown(truckId: string, truckBreakdownRequest: TruckBreakdownRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.reportTruckBreakdown(truckId, truckBreakdownRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OperationControllerApi - object-oriented interface
 * @export
 * @class OperationControllerApi
 * @extends {BaseAPI}
 */
export class OperationControllerApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OperationControllerApi
     */
    public getOperationStatus(options?: RawAxiosRequestConfig) {
        return OperationControllerApiFp(this.configuration).getOperationStatus(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OperationControllerApi
     */
    public manualReplanification(options?: RawAxiosRequestConfig) {
        return OperationControllerApiFp(this.configuration).manualReplanification(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {RegisterOrderRequest} registerOrderRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OperationControllerApi
     */
    public registerOrder(registerOrderRequest: RegisterOrderRequest, options?: RawAxiosRequestConfig) {
        return OperationControllerApiFp(this.configuration).registerOrder(registerOrderRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} truckId 
     * @param {TruckBreakdownRequest} truckBreakdownRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OperationControllerApi
     */
    public reportTruckBreakdown(truckId: string, truckBreakdownRequest: TruckBreakdownRequest, options?: RawAxiosRequestConfig) {
        return OperationControllerApiFp(this.configuration).reportTruckBreakdown(truckId, truckBreakdownRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * OrderControllerApi - axios parameter creator
 * @export
 */
export const OrderControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list2: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/orders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OrderControllerApi - functional programming interface
 * @export
 */
export const OrderControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OrderControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async list2(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Order>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.list2(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrderControllerApi.list2']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * OrderControllerApi - factory interface
 * @export
 */
export const OrderControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OrderControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list2(options?: RawAxiosRequestConfig): AxiosPromise<Array<Order>> {
            return localVarFp.list2(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OrderControllerApi - object-oriented interface
 * @export
 * @class OrderControllerApi
 * @extends {BaseAPI}
 */
export class OrderControllerApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderControllerApi
     */
    public list2(options?: RawAxiosRequestConfig) {
        return OrderControllerApiFp(this.configuration).list2(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * SimulationControllerApi - axios parameter creator
 * @export
 */
export const SimulationControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} simulationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSimulationStatus: async (simulationId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'simulationId' is not null or undefined
            assertParamExists('getSimulationStatus', 'simulationId', simulationId)
            const localVarPath = `/simulation/status/{simulationId}`
                .replace(`{${"simulationId"}}`, encodeURIComponent(String(simulationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} simulationId 
         * @param {SimulationCommandRequest} simulationCommandRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendCommand: async (simulationId: string, simulationCommandRequest: SimulationCommandRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'simulationId' is not null or undefined
            assertParamExists('sendCommand', 'simulationId', simulationId)
            // verify required parameter 'simulationCommandRequest' is not null or undefined
            assertParamExists('sendCommand', 'simulationCommandRequest', simulationCommandRequest)
            const localVarPath = `/simulation/command/{simulationId}`
                .replace(`{${"simulationId"}}`, encodeURIComponent(String(simulationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(simulationCommandRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} simulationId 
         * @param {StartSimulationRequest} startSimulationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        startSimulation: async (simulationId: string, startSimulationRequest: StartSimulationRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'simulationId' is not null or undefined
            assertParamExists('startSimulation', 'simulationId', simulationId)
            // verify required parameter 'startSimulationRequest' is not null or undefined
            assertParamExists('startSimulation', 'startSimulationRequest', startSimulationRequest)
            const localVarPath = `/simulation/start/{simulationId}`
                .replace(`{${"simulationId"}}`, encodeURIComponent(String(simulationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(startSimulationRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} simulationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stopSimulation: async (simulationId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'simulationId' is not null or undefined
            assertParamExists('stopSimulation', 'simulationId', simulationId)
            const localVarPath = `/simulation/stop/{simulationId}`
                .replace(`{${"simulationId"}}`, encodeURIComponent(String(simulationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SimulationControllerApi - functional programming interface
 * @export
 */
export const SimulationControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SimulationControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} simulationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSimulationStatus(simulationId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SimulationStatus>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSimulationStatus(simulationId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SimulationControllerApi.getSimulationStatus']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} simulationId 
         * @param {SimulationCommandRequest} simulationCommandRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendCommand(simulationId: string, simulationCommandRequest: SimulationCommandRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sendCommand(simulationId, simulationCommandRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SimulationControllerApi.sendCommand']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} simulationId 
         * @param {StartSimulationRequest} startSimulationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async startSimulation(simulationId: string, startSimulationRequest: StartSimulationRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.startSimulation(simulationId, startSimulationRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SimulationControllerApi.startSimulation']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} simulationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async stopSimulation(simulationId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.stopSimulation(simulationId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SimulationControllerApi.stopSimulation']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SimulationControllerApi - factory interface
 * @export
 */
export const SimulationControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SimulationControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {string} simulationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSimulationStatus(simulationId: string, options?: RawAxiosRequestConfig): AxiosPromise<SimulationStatus> {
            return localVarFp.getSimulationStatus(simulationId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} simulationId 
         * @param {SimulationCommandRequest} simulationCommandRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendCommand(simulationId: string, simulationCommandRequest: SimulationCommandRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.sendCommand(simulationId, simulationCommandRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} simulationId 
         * @param {StartSimulationRequest} startSimulationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        startSimulation(simulationId: string, startSimulationRequest: StartSimulationRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.startSimulation(simulationId, startSimulationRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} simulationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stopSimulation(simulationId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.stopSimulation(simulationId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SimulationControllerApi - object-oriented interface
 * @export
 * @class SimulationControllerApi
 * @extends {BaseAPI}
 */
export class SimulationControllerApi extends BaseAPI {
    /**
     * 
     * @param {string} simulationId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SimulationControllerApi
     */
    public getSimulationStatus(simulationId: string, options?: RawAxiosRequestConfig) {
        return SimulationControllerApiFp(this.configuration).getSimulationStatus(simulationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} simulationId 
     * @param {SimulationCommandRequest} simulationCommandRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SimulationControllerApi
     */
    public sendCommand(simulationId: string, simulationCommandRequest: SimulationCommandRequest, options?: RawAxiosRequestConfig) {
        return SimulationControllerApiFp(this.configuration).sendCommand(simulationId, simulationCommandRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} simulationId 
     * @param {StartSimulationRequest} startSimulationRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SimulationControllerApi
     */
    public startSimulation(simulationId: string, startSimulationRequest: StartSimulationRequest, options?: RawAxiosRequestConfig) {
        return SimulationControllerApiFp(this.configuration).startSimulation(simulationId, startSimulationRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} simulationId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SimulationControllerApi
     */
    public stopSimulation(simulationId: string, options?: RawAxiosRequestConfig) {
        return SimulationControllerApiFp(this.configuration).stopSimulation(simulationId, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * StationControllerApi - axios parameter creator
 * @export
 */
export const StationControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {Station} station 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createStation: async (station: Station, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'station' is not null or undefined
            assertParamExists('createStation', 'station', station)
            const localVarPath = `/stations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(station, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} stationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteStation: async (stationId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'stationId' is not null or undefined
            assertParamExists('deleteStation', 'stationId', stationId)
            const localVarPath = `/stations/{stationId}`
                .replace(`{${"stationId"}}`, encodeURIComponent(String(stationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} stationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStationById: async (stationId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'stationId' is not null or undefined
            assertParamExists('getStationById', 'stationId', stationId)
            const localVarPath = `/stations/{stationId}`
                .replace(`{${"stationId"}}`, encodeURIComponent(String(stationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Pageable} pageable 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list1: async (pageable: Pageable, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pageable' is not null or undefined
            assertParamExists('list1', 'pageable', pageable)
            const localVarPath = `/stations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (pageable !== undefined) {
                for (const [key, value] of Object.entries(pageable)) {
                    localVarQueryParameter[key] = value;
                }
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} stationId 
         * @param {Station} station 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateStation: async (stationId: string, station: Station, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'stationId' is not null or undefined
            assertParamExists('updateStation', 'stationId', stationId)
            // verify required parameter 'station' is not null or undefined
            assertParamExists('updateStation', 'station', station)
            const localVarPath = `/stations/{stationId}`
                .replace(`{${"stationId"}}`, encodeURIComponent(String(stationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(station, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StationControllerApi - functional programming interface
 * @export
 */
export const StationControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = StationControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {Station} station 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createStation(station: Station, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Station>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createStation(station, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StationControllerApi.createStation']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} stationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteStation(stationId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteStation(stationId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StationControllerApi.deleteStation']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} stationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getStationById(stationId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Station>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getStationById(stationId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StationControllerApi.getStationById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {Pageable} pageable 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async list1(pageable: Pageable, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageStation>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.list1(pageable, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StationControllerApi.list1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} stationId 
         * @param {Station} station 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateStation(stationId: string, station: Station, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Station>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateStation(stationId, station, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StationControllerApi.updateStation']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * StationControllerApi - factory interface
 * @export
 */
export const StationControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = StationControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {Station} station 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createStation(station: Station, options?: RawAxiosRequestConfig): AxiosPromise<Station> {
            return localVarFp.createStation(station, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} stationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteStation(stationId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteStation(stationId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} stationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStationById(stationId: string, options?: RawAxiosRequestConfig): AxiosPromise<Station> {
            return localVarFp.getStationById(stationId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Pageable} pageable 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list1(pageable: Pageable, options?: RawAxiosRequestConfig): AxiosPromise<PageStation> {
            return localVarFp.list1(pageable, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} stationId 
         * @param {Station} station 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateStation(stationId: string, station: Station, options?: RawAxiosRequestConfig): AxiosPromise<Station> {
            return localVarFp.updateStation(stationId, station, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * StationControllerApi - object-oriented interface
 * @export
 * @class StationControllerApi
 * @extends {BaseAPI}
 */
export class StationControllerApi extends BaseAPI {
    /**
     * 
     * @param {Station} station 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StationControllerApi
     */
    public createStation(station: Station, options?: RawAxiosRequestConfig) {
        return StationControllerApiFp(this.configuration).createStation(station, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} stationId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StationControllerApi
     */
    public deleteStation(stationId: string, options?: RawAxiosRequestConfig) {
        return StationControllerApiFp(this.configuration).deleteStation(stationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} stationId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StationControllerApi
     */
    public getStationById(stationId: string, options?: RawAxiosRequestConfig) {
        return StationControllerApiFp(this.configuration).getStationById(stationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {Pageable} pageable 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StationControllerApi
     */
    public list1(pageable: Pageable, options?: RawAxiosRequestConfig) {
        return StationControllerApiFp(this.configuration).list1(pageable, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} stationId 
     * @param {Station} station 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StationControllerApi
     */
    public updateStation(stationId: string, station: Station, options?: RawAxiosRequestConfig) {
        return StationControllerApiFp(this.configuration).updateStation(stationId, station, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * TruckControllerApi - axios parameter creator
 * @export
 */
export const TruckControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {Truck} truck 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTruck: async (truck: Truck, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'truck' is not null or undefined
            assertParamExists('createTruck', 'truck', truck)
            const localVarPath = `/trucks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(truck, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} truckId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTruck: async (truckId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'truckId' is not null or undefined
            assertParamExists('deleteTruck', 'truckId', truckId)
            const localVarPath = `/trucks/{truckId}`
                .replace(`{${"truckId"}}`, encodeURIComponent(String(truckId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} truckId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTruckById: async (truckId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'truckId' is not null or undefined
            assertParamExists('getTruckById', 'truckId', truckId)
            const localVarPath = `/trucks/truck/{truckId}`
                .replace(`{${"truckId"}}`, encodeURIComponent(String(truckId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Pageable} pageable 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list: async (pageable: Pageable, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pageable' is not null or undefined
            assertParamExists('list', 'pageable', pageable)
            const localVarPath = `/trucks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (pageable !== undefined) {
                for (const [key, value] of Object.entries(pageable)) {
                    localVarQueryParameter[key] = value;
                }
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} truckId 
         * @param {Truck} truck 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTruck: async (truckId: string, truck: Truck, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'truckId' is not null or undefined
            assertParamExists('updateTruck', 'truckId', truckId)
            // verify required parameter 'truck' is not null or undefined
            assertParamExists('updateTruck', 'truck', truck)
            const localVarPath = `/trucks/{truckId}`
                .replace(`{${"truckId"}}`, encodeURIComponent(String(truckId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(truck, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TruckControllerApi - functional programming interface
 * @export
 */
export const TruckControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TruckControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {Truck} truck 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createTruck(truck: Truck, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Truck>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createTruck(truck, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TruckControllerApi.createTruck']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} truckId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTruck(truckId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteTruck(truckId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TruckControllerApi.deleteTruck']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} truckId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTruckById(truckId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Truck>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTruckById(truckId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TruckControllerApi.getTruckById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {Pageable} pageable 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async list(pageable: Pageable, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageTruck>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.list(pageable, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TruckControllerApi.list']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} truckId 
         * @param {Truck} truck 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateTruck(truckId: string, truck: Truck, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Truck>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateTruck(truckId, truck, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TruckControllerApi.updateTruck']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * TruckControllerApi - factory interface
 * @export
 */
export const TruckControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TruckControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {Truck} truck 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTruck(truck: Truck, options?: RawAxiosRequestConfig): AxiosPromise<Truck> {
            return localVarFp.createTruck(truck, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} truckId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTruck(truckId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteTruck(truckId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} truckId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTruckById(truckId: string, options?: RawAxiosRequestConfig): AxiosPromise<Truck> {
            return localVarFp.getTruckById(truckId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Pageable} pageable 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list(pageable: Pageable, options?: RawAxiosRequestConfig): AxiosPromise<PageTruck> {
            return localVarFp.list(pageable, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} truckId 
         * @param {Truck} truck 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTruck(truckId: string, truck: Truck, options?: RawAxiosRequestConfig): AxiosPromise<Truck> {
            return localVarFp.updateTruck(truckId, truck, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TruckControllerApi - object-oriented interface
 * @export
 * @class TruckControllerApi
 * @extends {BaseAPI}
 */
export class TruckControllerApi extends BaseAPI {
    /**
     * 
     * @param {Truck} truck 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TruckControllerApi
     */
    public createTruck(truck: Truck, options?: RawAxiosRequestConfig) {
        return TruckControllerApiFp(this.configuration).createTruck(truck, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} truckId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TruckControllerApi
     */
    public deleteTruck(truckId: string, options?: RawAxiosRequestConfig) {
        return TruckControllerApiFp(this.configuration).deleteTruck(truckId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} truckId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TruckControllerApi
     */
    public getTruckById(truckId: string, options?: RawAxiosRequestConfig) {
        return TruckControllerApiFp(this.configuration).getTruckById(truckId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {Pageable} pageable 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TruckControllerApi
     */
    public list(pageable: Pageable, options?: RawAxiosRequestConfig) {
        return TruckControllerApiFp(this.configuration).list(pageable, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} truckId 
     * @param {Truck} truck 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TruckControllerApi
     */
    public updateTruck(truckId: string, truck: Truck, options?: RawAxiosRequestConfig) {
        return TruckControllerApiFp(this.configuration).updateTruck(truckId, truck, options).then((request) => request(this.axios, this.basePath));
    }
}



