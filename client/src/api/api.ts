/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { AxiosInstance, AxiosPromise, RawAxiosRequestConfig } from 'axios'
import globalAxios from 'axios'
import type { RequestArgs } from './base'
// @ts-ignore
import {
  BASE_PATH,
  BaseAPI,
  COLLECTION_FORMATS,
  RequiredError,
  operationServerMap,
} from './base'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  createRequestFunction,
  serializeDataIfNeeded,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  toPathString,
} from './common'
import type { Configuration } from './configuration'

/**
 *
 * @export
 * @interface Incident
 */
export interface Incident {
  /**
   *
   * @type {string}
   * @memberof Incident
   */
  type?: string
  /**
   *
   * @type {string}
   * @memberof Incident
   */
  date?: string
  /**
   *
   * @type {string}
   * @memberof Incident
   */
  truckCode?: string
}
/**
 *
 * @export
 * @interface Order
 */
export interface Order {
  /**
   *
   * @type {string}
   * @memberof Order
   */
  id?: string
  /**
   *
   * @type {string}
   * @memberof Order
   */
  clientId?: string
  /**
   *
   * @type {string}
   * @memberof Order
   */
  date?: string
  /**
   *
   * @type {Point}
   * @memberof Order
   */
  location?: Point
  /**
   *
   * @type {number}
   * @memberof Order
   */
  requestedGLP?: number
  /**
   *
   * @type {number}
   * @memberof Order
   */
  deliveredGLP?: number
  /**
   *
   * @type {string}
   * @memberof Order
   */
  limit?: string
  /**
   *
   * @type {string}
   * @memberof Order
   */
  maxDeliveryDate?: string
  /**
   *
   * @type {string}
   * @memberof Order
   */
  minDeliveryDate?: string
}
/**
 *
 * @export
 * @interface PLGNetwork
 */
export interface PLGNetwork {
  /**
   *
   * @type {Array<Truck>}
   * @memberof PLGNetwork
   */
  trucks?: Array<Truck>
  /**
   *
   * @type {Array<Station>}
   * @memberof PLGNetwork
   */
  stations?: Array<Station>
  /**
   *
   * @type {Array<Order>}
   * @memberof PLGNetwork
   */
  orders?: Array<Order>
  /**
   *
   * @type {Array<Incident>}
   * @memberof PLGNetwork
   */
  incidents?: Array<Incident>
  /**
   *
   * @type {Array<Roadblock>}
   * @memberof PLGNetwork
   */
  roadblocks?: Array<Roadblock>
  /**
   *
   * @type {number}
   * @memberof PLGNetwork
   */
  trucksCapacity?: number
}
/**
 *
 * @export
 * @interface Point
 */
export interface Point {
  /**
   *
   * @type {number}
   * @memberof Point
   */
  x?: number
  /**
   *
   * @type {number}
   * @memberof Point
   */
  y?: number
}
/**
 *
 * @export
 * @interface Roadblock
 */
export interface Roadblock {
  /**
   *
   * @type {string}
   * @memberof Roadblock
   */
  start?: string
  /**
   *
   * @type {string}
   * @memberof Roadblock
   */
  end?: string
  /**
   *
   * @type {Array<Point>}
   * @memberof Roadblock
   */
  blockedNodes?: Array<Point>
}
/**
 *
 * @export
 * @interface Station
 */
export interface Station {
  /**
   *
   * @type {string}
   * @memberof Station
   */
  id?: string
  /**
   *
   * @type {string}
   * @memberof Station
   */
  name?: string
  /**
   *
   * @type {Point}
   * @memberof Station
   */
  location?: Point
  /**
   *
   * @type {number}
   * @memberof Station
   */
  maxCapacity?: number
  /**
   *
   * @type {boolean}
   * @memberof Station
   */
  mainStation?: boolean
  /**
   *
   * @type {{ [key: string]: number; }}
   * @memberof Station
   */
  availableCapacityPerDate?: { [key: string]: number }
}
/**
 *
 * @export
 * @interface Truck
 */
export interface Truck {
  /**
   *
   * @type {string}
   * @memberof Truck
   */
  id?: string
  /**
   *
   * @type {string}
   * @memberof Truck
   */
  code?: string
  /**
   *
   * @type {string}
   * @memberof Truck
   */
  type?: TruckTypeEnum
  /**
   *
   * @type {string}
   * @memberof Truck
   */
  status?: TruckStatusEnum
  /**
   *
   * @type {number}
   * @memberof Truck
   */
  tareWeight?: number
  /**
   *
   * @type {number}
   * @memberof Truck
   */
  maxCapacity?: number
  /**
   *
   * @type {number}
   * @memberof Truck
   */
  currentCapacity?: number
  /**
   *
   * @type {number}
   * @memberof Truck
   */
  fuelCapacity?: number
  /**
   *
   * @type {number}
   * @memberof Truck
   */
  currentFuel?: number
  /**
   *
   * @type {string}
   * @memberof Truck
   */
  nextMaintenance?: string
  /**
   *
   * @type {Point}
   * @memberof Truck
   */
  location?: Point
}

export const TruckTypeEnum = {
  Ta: 'TA',
  Tb: 'TB',
  Tc: 'TC',
  Td: 'TD',
} as const

export type TruckTypeEnum = (typeof TruckTypeEnum)[keyof typeof TruckTypeEnum]
export const TruckStatusEnum = {
  Maintenance: 'MAINTENANCE',
  Active: 'ACTIVE',
  BrokenDown: 'BROKEN_DOWN',
} as const

export type TruckStatusEnum =
  (typeof TruckStatusEnum)[keyof typeof TruckStatusEnum]

/**
 * BenchmarkControllerApi - axios parameter creator
 * @export
 */
export const BenchmarkControllerApiAxiosParamCreator = (
  configuration?: Configuration,
) => ({
  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   */
  startBenchmark: async (
    options: RawAxiosRequestConfig = {},
  ): Promise<RequestArgs> => {
    const localVarPath = '/benchmark/start'
    // use dummy base URL string because the URL constructor only accepts absolute URLs.
    const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
    let baseOptions
    if (configuration) {
      baseOptions = configuration.baseOptions
    }

    const localVarRequestOptions = {
      method: 'POST',
      ...baseOptions,
      ...options,
    }
    const localVarHeaderParameter = {} as any
    const localVarQueryParameter = {} as any

    setSearchParams(localVarUrlObj, localVarQueryParameter)
    const headersFromBaseOptions =
      baseOptions && baseOptions.headers ? baseOptions.headers : {}
    localVarRequestOptions.headers = {
      ...localVarHeaderParameter,
      ...headersFromBaseOptions,
      ...options.headers,
    }

    return {
      url: toPathString(localVarUrlObj),
      options: localVarRequestOptions,
    }
  },
})

/**
 * BenchmarkControllerApi - functional programming interface
 * @export
 */
export const BenchmarkControllerApiFp = (configuration?: Configuration) => {
  const localVarAxiosParamCreator =
    BenchmarkControllerApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async startBenchmark(
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PLGNetwork>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.startBenchmark(options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['BenchmarkControllerApi.startBenchmark']?.[
          localVarOperationServerIndex
        ]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
  }
}

/**
 * BenchmarkControllerApi - factory interface
 * @export
 */
export const BenchmarkControllerApiFactory = (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) => {
  const localVarFp = BenchmarkControllerApiFp(configuration)
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    startBenchmark(options?: RawAxiosRequestConfig): AxiosPromise<PLGNetwork> {
      return localVarFp
        .startBenchmark(options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * BenchmarkControllerApi - object-oriented interface
 * @export
 * @class BenchmarkControllerApi
 * @extends {BaseAPI}
 */
export class BenchmarkControllerApi extends BaseAPI {
  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BenchmarkControllerApi
   */
  public startBenchmark(options?: RawAxiosRequestConfig) {
    return BenchmarkControllerApiFp(this.configuration)
      .startBenchmark(options)
      .then((request) => request(this.axios, this.basePath))
  }
}

/**
 * MainControllerApi - axios parameter creator
 * @export
 */
export const MainControllerApiAxiosParamCreator = (
  configuration?: Configuration,
) => ({
  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   */
  sayHello: async (
    options: RawAxiosRequestConfig = {},
  ): Promise<RequestArgs> => {
    const localVarPath = `/`
    // use dummy base URL string because the URL constructor only accepts absolute URLs.
    const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
    let baseOptions
    if (configuration) {
      baseOptions = configuration.baseOptions
    }

    const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
    const localVarHeaderParameter = {} as any
    const localVarQueryParameter = {} as any

    setSearchParams(localVarUrlObj, localVarQueryParameter)
    const headersFromBaseOptions =
      baseOptions && baseOptions.headers ? baseOptions.headers : {}
    localVarRequestOptions.headers = {
      ...localVarHeaderParameter,
      ...headersFromBaseOptions,
      ...options.headers,
    }

    return {
      url: toPathString(localVarUrlObj),
      options: localVarRequestOptions,
    }
  },
})

/**
 * MainControllerApi - functional programming interface
 * @export
 */
export const MainControllerApiFp = (configuration?: Configuration) => {
  const localVarAxiosParamCreator =
    MainControllerApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async sayHello(
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.sayHello(options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['MainControllerApi.sayHello']?.[
          localVarOperationServerIndex
        ]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
  }
}

/**
 * MainControllerApi - factory interface
 * @export
 */
export const MainControllerApiFactory = (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) => {
  const localVarFp = MainControllerApiFp(configuration)
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sayHello(options?: RawAxiosRequestConfig): AxiosPromise<string> {
      return localVarFp
        .sayHello(options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * MainControllerApi - object-oriented interface
 * @export
 * @class MainControllerApi
 * @extends {BaseAPI}
 */
export class MainControllerApi extends BaseAPI {
  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MainControllerApi
   */
  public sayHello(options?: RawAxiosRequestConfig) {
    return MainControllerApiFp(this.configuration)
      .sayHello(options)
      .then((request) => request(this.axios, this.basePath))
  }
}
