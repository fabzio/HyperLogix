/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as LoginImport } from './routes/login'
import { Route as ClientsImport } from './routes/clients'
import { Route as AuthImport } from './routes/_auth'
import { Route as AuthIndexImport } from './routes/_auth/index'
import { Route as AuthTrucksImport } from './routes/_auth/trucks'
import { Route as AuthStationsImport } from './routes/_auth/stations'
import { Route as AuthSimulacionImport } from './routes/_auth/simulacion'
import { Route as AuthMapImport } from './routes/_auth/map'
import { Route as AuthDriverImport } from './routes/_auth/driver'

// Create/Update Routes

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const ClientsRoute = ClientsImport.update({
  id: '/clients',
  path: '/clients',
  getParentRoute: () => rootRoute,
} as any)

const AuthRoute = AuthImport.update({
  id: '/_auth',
  getParentRoute: () => rootRoute,
} as any)

const AuthIndexRoute = AuthIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AuthRoute,
} as any)

const AuthTrucksRoute = AuthTrucksImport.update({
  id: '/trucks',
  path: '/trucks',
  getParentRoute: () => AuthRoute,
} as any)

const AuthStationsRoute = AuthStationsImport.update({
  id: '/stations',
  path: '/stations',
  getParentRoute: () => AuthRoute,
} as any)

const AuthSimulacionRoute = AuthSimulacionImport.update({
  id: '/simulacion',
  path: '/simulacion',
  getParentRoute: () => AuthRoute,
} as any)

const AuthMapRoute = AuthMapImport.update({
  id: '/map',
  path: '/map',
  getParentRoute: () => AuthRoute,
} as any)

const AuthDriverRoute = AuthDriverImport.update({
  id: '/driver',
  path: '/driver',
  getParentRoute: () => AuthRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_auth': {
      id: '/_auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthImport
      parentRoute: typeof rootRoute
    }
    '/clients': {
      id: '/clients'
      path: '/clients'
      fullPath: '/clients'
      preLoaderRoute: typeof ClientsImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/_auth/driver': {
      id: '/_auth/driver'
      path: '/driver'
      fullPath: '/driver'
      preLoaderRoute: typeof AuthDriverImport
      parentRoute: typeof AuthImport
    }
    '/_auth/map': {
      id: '/_auth/map'
      path: '/map'
      fullPath: '/map'
      preLoaderRoute: typeof AuthMapImport
      parentRoute: typeof AuthImport
    }
    '/_auth/simulacion': {
      id: '/_auth/simulacion'
      path: '/simulacion'
      fullPath: '/simulacion'
      preLoaderRoute: typeof AuthSimulacionImport
      parentRoute: typeof AuthImport
    }
    '/_auth/stations': {
      id: '/_auth/stations'
      path: '/stations'
      fullPath: '/stations'
      preLoaderRoute: typeof AuthStationsImport
      parentRoute: typeof AuthImport
    }
    '/_auth/trucks': {
      id: '/_auth/trucks'
      path: '/trucks'
      fullPath: '/trucks'
      preLoaderRoute: typeof AuthTrucksImport
      parentRoute: typeof AuthImport
    }
    '/_auth/': {
      id: '/_auth/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof AuthIndexImport
      parentRoute: typeof AuthImport
    }
  }
}

// Create and export the route tree

interface AuthRouteChildren {
  AuthDriverRoute: typeof AuthDriverRoute
  AuthMapRoute: typeof AuthMapRoute
  AuthSimulacionRoute: typeof AuthSimulacionRoute
  AuthStationsRoute: typeof AuthStationsRoute
  AuthTrucksRoute: typeof AuthTrucksRoute
  AuthIndexRoute: typeof AuthIndexRoute
}

const AuthRouteChildren: AuthRouteChildren = {
  AuthDriverRoute: AuthDriverRoute,
  AuthMapRoute: AuthMapRoute,
  AuthSimulacionRoute: AuthSimulacionRoute,
  AuthStationsRoute: AuthStationsRoute,
  AuthTrucksRoute: AuthTrucksRoute,
  AuthIndexRoute: AuthIndexRoute,
}

const AuthRouteWithChildren = AuthRoute._addFileChildren(AuthRouteChildren)

export interface FileRoutesByFullPath {
  '': typeof AuthRouteWithChildren
  '/clients': typeof ClientsRoute
  '/login': typeof LoginRoute
  '/driver': typeof AuthDriverRoute
  '/map': typeof AuthMapRoute
  '/simulacion': typeof AuthSimulacionRoute
  '/stations': typeof AuthStationsRoute
  '/trucks': typeof AuthTrucksRoute
  '/': typeof AuthIndexRoute
}

export interface FileRoutesByTo {
  '/clients': typeof ClientsRoute
  '/login': typeof LoginRoute
  '/driver': typeof AuthDriverRoute
  '/map': typeof AuthMapRoute
  '/simulacion': typeof AuthSimulacionRoute
  '/stations': typeof AuthStationsRoute
  '/trucks': typeof AuthTrucksRoute
  '/': typeof AuthIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_auth': typeof AuthRouteWithChildren
  '/clients': typeof ClientsRoute
  '/login': typeof LoginRoute
  '/_auth/driver': typeof AuthDriverRoute
  '/_auth/map': typeof AuthMapRoute
  '/_auth/simulacion': typeof AuthSimulacionRoute
  '/_auth/stations': typeof AuthStationsRoute
  '/_auth/trucks': typeof AuthTrucksRoute
  '/_auth/': typeof AuthIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | ''
    | '/clients'
    | '/login'
    | '/driver'
    | '/map'
    | '/simulacion'
    | '/stations'
    | '/trucks'
    | '/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/clients'
    | '/login'
    | '/driver'
    | '/map'
    | '/simulacion'
    | '/stations'
    | '/trucks'
    | '/'
  id:
    | '__root__'
    | '/_auth'
    | '/clients'
    | '/login'
    | '/_auth/driver'
    | '/_auth/map'
    | '/_auth/simulacion'
    | '/_auth/stations'
    | '/_auth/trucks'
    | '/_auth/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  AuthRoute: typeof AuthRouteWithChildren
  ClientsRoute: typeof ClientsRoute
  LoginRoute: typeof LoginRoute
}

const rootRouteChildren: RootRouteChildren = {
  AuthRoute: AuthRouteWithChildren,
  ClientsRoute: ClientsRoute,
  LoginRoute: LoginRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_auth",
        "/clients",
        "/login"
      ]
    },
    "/_auth": {
      "filePath": "_auth.tsx",
      "children": [
        "/_auth/driver",
        "/_auth/map",
        "/_auth/simulacion",
        "/_auth/stations",
        "/_auth/trucks",
        "/_auth/"
      ]
    },
    "/clients": {
      "filePath": "clients.tsx"
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/_auth/driver": {
      "filePath": "_auth/driver.tsx",
      "parent": "/_auth"
    },
    "/_auth/map": {
      "filePath": "_auth/map.tsx",
      "parent": "/_auth"
    },
    "/_auth/simulacion": {
      "filePath": "_auth/simulacion.tsx",
      "parent": "/_auth"
    },
    "/_auth/stations": {
      "filePath": "_auth/stations.tsx",
      "parent": "/_auth"
    },
    "/_auth/trucks": {
      "filePath": "_auth/trucks.tsx",
      "parent": "/_auth"
    },
    "/_auth/": {
      "filePath": "_auth/index.tsx",
      "parent": "/_auth"
    }
  }
}
ROUTE_MANIFEST_END */
